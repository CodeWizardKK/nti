// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nti/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetNftTransferRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetNftTransferRequest) Reset()         { *m = QueryGetNftTransferRequest{} }
func (m *QueryGetNftTransferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftTransferRequest) ProtoMessage()    {}
func (*QueryGetNftTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{2}
}
func (m *QueryGetNftTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftTransferRequest.Merge(m, src)
}
func (m *QueryGetNftTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftTransferRequest proto.InternalMessageInfo

func (m *QueryGetNftTransferRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetNftTransferResponse struct {
	NftTransfer NftTransfer `protobuf:"bytes,1,opt,name=nftTransfer,proto3" json:"nftTransfer"`
}

func (m *QueryGetNftTransferResponse) Reset()         { *m = QueryGetNftTransferResponse{} }
func (m *QueryGetNftTransferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftTransferResponse) ProtoMessage()    {}
func (*QueryGetNftTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{3}
}
func (m *QueryGetNftTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftTransferResponse.Merge(m, src)
}
func (m *QueryGetNftTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftTransferResponse proto.InternalMessageInfo

func (m *QueryGetNftTransferResponse) GetNftTransfer() NftTransfer {
	if m != nil {
		return m.NftTransfer
	}
	return NftTransfer{}
}

type QueryAllNftTransferRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNftTransferRequest) Reset()         { *m = QueryAllNftTransferRequest{} }
func (m *QueryAllNftTransferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNftTransferRequest) ProtoMessage()    {}
func (*QueryAllNftTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{4}
}
func (m *QueryAllNftTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNftTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNftTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNftTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNftTransferRequest.Merge(m, src)
}
func (m *QueryAllNftTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNftTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNftTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNftTransferRequest proto.InternalMessageInfo

func (m *QueryAllNftTransferRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNftTransferResponse struct {
	NftTransfer []NftTransfer       `protobuf:"bytes,1,rep,name=nftTransfer,proto3" json:"nftTransfer"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNftTransferResponse) Reset()         { *m = QueryAllNftTransferResponse{} }
func (m *QueryAllNftTransferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNftTransferResponse) ProtoMessage()    {}
func (*QueryAllNftTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{5}
}
func (m *QueryAllNftTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNftTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNftTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNftTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNftTransferResponse.Merge(m, src)
}
func (m *QueryAllNftTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNftTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNftTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNftTransferResponse proto.InternalMessageInfo

func (m *QueryAllNftTransferResponse) GetNftTransfer() []NftTransfer {
	if m != nil {
		return m.NftTransfer
	}
	return nil
}

func (m *QueryAllNftTransferResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReservedNftTransferRequest struct {
	ReservedKey string `protobuf:"bytes,1,opt,name=reservedKey,proto3" json:"reservedKey,omitempty"`
}

func (m *QueryGetReservedNftTransferRequest) Reset()         { *m = QueryGetReservedNftTransferRequest{} }
func (m *QueryGetReservedNftTransferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReservedNftTransferRequest) ProtoMessage()    {}
func (*QueryGetReservedNftTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{6}
}
func (m *QueryGetReservedNftTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReservedNftTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReservedNftTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReservedNftTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReservedNftTransferRequest.Merge(m, src)
}
func (m *QueryGetReservedNftTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReservedNftTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReservedNftTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReservedNftTransferRequest proto.InternalMessageInfo

func (m *QueryGetReservedNftTransferRequest) GetReservedKey() string {
	if m != nil {
		return m.ReservedKey
	}
	return ""
}

type QueryGetReservedNftTransferResponse struct {
	ReservedNftTransfer ReservedNftTransfer `protobuf:"bytes,1,opt,name=reservedNftTransfer,proto3" json:"reservedNftTransfer"`
}

func (m *QueryGetReservedNftTransferResponse) Reset()         { *m = QueryGetReservedNftTransferResponse{} }
func (m *QueryGetReservedNftTransferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReservedNftTransferResponse) ProtoMessage()    {}
func (*QueryGetReservedNftTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{7}
}
func (m *QueryGetReservedNftTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReservedNftTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReservedNftTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReservedNftTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReservedNftTransferResponse.Merge(m, src)
}
func (m *QueryGetReservedNftTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReservedNftTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReservedNftTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReservedNftTransferResponse proto.InternalMessageInfo

func (m *QueryGetReservedNftTransferResponse) GetReservedNftTransfer() ReservedNftTransfer {
	if m != nil {
		return m.ReservedNftTransfer
	}
	return ReservedNftTransfer{}
}

type QueryAllReservedNftTransferRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReservedNftTransferRequest) Reset()         { *m = QueryAllReservedNftTransferRequest{} }
func (m *QueryAllReservedNftTransferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReservedNftTransferRequest) ProtoMessage()    {}
func (*QueryAllReservedNftTransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{8}
}
func (m *QueryAllReservedNftTransferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReservedNftTransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReservedNftTransferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReservedNftTransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReservedNftTransferRequest.Merge(m, src)
}
func (m *QueryAllReservedNftTransferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReservedNftTransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReservedNftTransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReservedNftTransferRequest proto.InternalMessageInfo

func (m *QueryAllReservedNftTransferRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReservedNftTransferResponse struct {
	ReservedNftTransfer []ReservedNftTransfer `protobuf:"bytes,1,rep,name=reservedNftTransfer,proto3" json:"reservedNftTransfer"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReservedNftTransferResponse) Reset()         { *m = QueryAllReservedNftTransferResponse{} }
func (m *QueryAllReservedNftTransferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllReservedNftTransferResponse) ProtoMessage()    {}
func (*QueryAllReservedNftTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{9}
}
func (m *QueryAllReservedNftTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReservedNftTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReservedNftTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReservedNftTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReservedNftTransferResponse.Merge(m, src)
}
func (m *QueryAllReservedNftTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReservedNftTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReservedNftTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReservedNftTransferResponse proto.InternalMessageInfo

func (m *QueryAllReservedNftTransferResponse) GetReservedNftTransfer() []ReservedNftTransfer {
	if m != nil {
		return m.ReservedNftTransfer
	}
	return nil
}

func (m *QueryAllReservedNftTransferResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNftTransferStatusRequest struct {
}

func (m *QueryGetNftTransferStatusRequest) Reset()         { *m = QueryGetNftTransferStatusRequest{} }
func (m *QueryGetNftTransferStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftTransferStatusRequest) ProtoMessage()    {}
func (*QueryGetNftTransferStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{10}
}
func (m *QueryGetNftTransferStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftTransferStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftTransferStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftTransferStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftTransferStatusRequest.Merge(m, src)
}
func (m *QueryGetNftTransferStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftTransferStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftTransferStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftTransferStatusRequest proto.InternalMessageInfo

type QueryGetNftTransferStatusResponse struct {
	NftTransferStatus NftTransferStatus `protobuf:"bytes,1,opt,name=NftTransferStatus,proto3" json:"NftTransferStatus"`
}

func (m *QueryGetNftTransferStatusResponse) Reset()         { *m = QueryGetNftTransferStatusResponse{} }
func (m *QueryGetNftTransferStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftTransferStatusResponse) ProtoMessage()    {}
func (*QueryGetNftTransferStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{11}
}
func (m *QueryGetNftTransferStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftTransferStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftTransferStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftTransferStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftTransferStatusResponse.Merge(m, src)
}
func (m *QueryGetNftTransferStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftTransferStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftTransferStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftTransferStatusResponse proto.InternalMessageInfo

func (m *QueryGetNftTransferStatusResponse) GetNftTransferStatus() NftTransferStatus {
	if m != nil {
		return m.NftTransferStatus
	}
	return NftTransferStatus{}
}

type QueryGetNftMintRequest struct {
	ReservedKey string `protobuf:"bytes,1,opt,name=reservedKey,proto3" json:"reservedKey,omitempty"`
}

func (m *QueryGetNftMintRequest) Reset()         { *m = QueryGetNftMintRequest{} }
func (m *QueryGetNftMintRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftMintRequest) ProtoMessage()    {}
func (*QueryGetNftMintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{12}
}
func (m *QueryGetNftMintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftMintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftMintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftMintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftMintRequest.Merge(m, src)
}
func (m *QueryGetNftMintRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftMintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftMintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftMintRequest proto.InternalMessageInfo

func (m *QueryGetNftMintRequest) GetReservedKey() string {
	if m != nil {
		return m.ReservedKey
	}
	return ""
}

type QueryGetNftMintResponse struct {
	NftMint NftMint `protobuf:"bytes,1,opt,name=nftMint,proto3" json:"nftMint"`
}

func (m *QueryGetNftMintResponse) Reset()         { *m = QueryGetNftMintResponse{} }
func (m *QueryGetNftMintResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftMintResponse) ProtoMessage()    {}
func (*QueryGetNftMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{13}
}
func (m *QueryGetNftMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftMintResponse.Merge(m, src)
}
func (m *QueryGetNftMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftMintResponse proto.InternalMessageInfo

func (m *QueryGetNftMintResponse) GetNftMint() NftMint {
	if m != nil {
		return m.NftMint
	}
	return NftMint{}
}

type QueryAllNftMintRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNftMintRequest) Reset()         { *m = QueryAllNftMintRequest{} }
func (m *QueryAllNftMintRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNftMintRequest) ProtoMessage()    {}
func (*QueryAllNftMintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{14}
}
func (m *QueryAllNftMintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNftMintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNftMintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNftMintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNftMintRequest.Merge(m, src)
}
func (m *QueryAllNftMintRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNftMintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNftMintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNftMintRequest proto.InternalMessageInfo

func (m *QueryAllNftMintRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNftMintResponse struct {
	NftMint    []NftMint           `protobuf:"bytes,1,rep,name=nftMint,proto3" json:"nftMint"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNftMintResponse) Reset()         { *m = QueryAllNftMintResponse{} }
func (m *QueryAllNftMintResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNftMintResponse) ProtoMessage()    {}
func (*QueryAllNftMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{15}
}
func (m *QueryAllNftMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNftMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNftMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNftMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNftMintResponse.Merge(m, src)
}
func (m *QueryAllNftMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNftMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNftMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNftMintResponse proto.InternalMessageInfo

func (m *QueryAllNftMintResponse) GetNftMint() []NftMint {
	if m != nil {
		return m.NftMint
	}
	return nil
}

func (m *QueryAllNftMintResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryNftTransferStatusOfTokenRequest struct {
	Chain        int32              `protobuf:"varint,1,opt,name=chain,proto3" json:"chain,omitempty"`
	ContractAddr string             `protobuf:"bytes,2,opt,name=contractAddr,proto3" json:"contractAddr,omitempty"`
	TokenId      string             `protobuf:"bytes,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Pagination   *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNftTransferStatusOfTokenRequest) Reset()         { *m = QueryNftTransferStatusOfTokenRequest{} }
func (m *QueryNftTransferStatusOfTokenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNftTransferStatusOfTokenRequest) ProtoMessage()    {}
func (*QueryNftTransferStatusOfTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{16}
}
func (m *QueryNftTransferStatusOfTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftTransferStatusOfTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftTransferStatusOfTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftTransferStatusOfTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftTransferStatusOfTokenRequest.Merge(m, src)
}
func (m *QueryNftTransferStatusOfTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftTransferStatusOfTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftTransferStatusOfTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftTransferStatusOfTokenRequest proto.InternalMessageInfo

func (m *QueryNftTransferStatusOfTokenRequest) GetChain() int32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *QueryNftTransferStatusOfTokenRequest) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *QueryNftTransferStatusOfTokenRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *QueryNftTransferStatusOfTokenRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryNftTransferStatusOfTokenResponse struct {
	NftTransferStatusDetail []NftTransferStatusDetail `protobuf:"bytes,1,rep,name=nftTransferStatusDetail,proto3" json:"nftTransferStatusDetail"`
	Pagination              *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNftTransferStatusOfTokenResponse) Reset()         { *m = QueryNftTransferStatusOfTokenResponse{} }
func (m *QueryNftTransferStatusOfTokenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNftTransferStatusOfTokenResponse) ProtoMessage()    {}
func (*QueryNftTransferStatusOfTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{17}
}
func (m *QueryNftTransferStatusOfTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftTransferStatusOfTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftTransferStatusOfTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftTransferStatusOfTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftTransferStatusOfTokenResponse.Merge(m, src)
}
func (m *QueryNftTransferStatusOfTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftTransferStatusOfTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftTransferStatusOfTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftTransferStatusOfTokenResponse proto.InternalMessageInfo

func (m *QueryNftTransferStatusOfTokenResponse) GetNftTransferStatusDetail() []NftTransferStatusDetail {
	if m != nil {
		return m.NftTransferStatusDetail
	}
	return nil
}

func (m *QueryNftTransferStatusOfTokenResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryNftTransferStatusOfAddressRequest struct {
	Chain      int32              `protobuf:"varint,1,opt,name=chain,proto3" json:"chain,omitempty"`
	WalletAddr string             `protobuf:"bytes,2,opt,name=walletAddr,proto3" json:"walletAddr,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNftTransferStatusOfAddressRequest) Reset() {
	*m = QueryNftTransferStatusOfAddressRequest{}
}
func (m *QueryNftTransferStatusOfAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNftTransferStatusOfAddressRequest) ProtoMessage()    {}
func (*QueryNftTransferStatusOfAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{18}
}
func (m *QueryNftTransferStatusOfAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftTransferStatusOfAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftTransferStatusOfAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftTransferStatusOfAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftTransferStatusOfAddressRequest.Merge(m, src)
}
func (m *QueryNftTransferStatusOfAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftTransferStatusOfAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftTransferStatusOfAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftTransferStatusOfAddressRequest proto.InternalMessageInfo

func (m *QueryNftTransferStatusOfAddressRequest) GetChain() int32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *QueryNftTransferStatusOfAddressRequest) GetWalletAddr() string {
	if m != nil {
		return m.WalletAddr
	}
	return ""
}

func (m *QueryNftTransferStatusOfAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryNftTransferStatusOfAddressResponse struct {
	NftTransferStatusDetail []NftTransferStatusDetail `protobuf:"bytes,1,rep,name=nftTransferStatusDetail,proto3" json:"nftTransferStatusDetail"`
	Pagination              *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNftTransferStatusOfAddressResponse) Reset() {
	*m = QueryNftTransferStatusOfAddressResponse{}
}
func (m *QueryNftTransferStatusOfAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNftTransferStatusOfAddressResponse) ProtoMessage()    {}
func (*QueryNftTransferStatusOfAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{19}
}
func (m *QueryNftTransferStatusOfAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftTransferStatusOfAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftTransferStatusOfAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftTransferStatusOfAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftTransferStatusOfAddressResponse.Merge(m, src)
}
func (m *QueryNftTransferStatusOfAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftTransferStatusOfAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftTransferStatusOfAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftTransferStatusOfAddressResponse proto.InternalMessageInfo

func (m *QueryNftTransferStatusOfAddressResponse) GetNftTransferStatusDetail() []NftTransferStatusDetail {
	if m != nil {
		return m.NftTransferStatusDetail
	}
	return nil
}

func (m *QueryNftTransferStatusOfAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryNftTransferHistoryRequest struct {
	Chain        int32              `protobuf:"varint,1,opt,name=chain,proto3" json:"chain,omitempty"`
	ContractAddr string             `protobuf:"bytes,2,opt,name=contractAddr,proto3" json:"contractAddr,omitempty"`
	TokenId      string             `protobuf:"bytes,3,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Pagination   *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNftTransferHistoryRequest) Reset()         { *m = QueryNftTransferHistoryRequest{} }
func (m *QueryNftTransferHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNftTransferHistoryRequest) ProtoMessage()    {}
func (*QueryNftTransferHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{20}
}
func (m *QueryNftTransferHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftTransferHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftTransferHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftTransferHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftTransferHistoryRequest.Merge(m, src)
}
func (m *QueryNftTransferHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftTransferHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftTransferHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftTransferHistoryRequest proto.InternalMessageInfo

func (m *QueryNftTransferHistoryRequest) GetChain() int32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *QueryNftTransferHistoryRequest) GetContractAddr() string {
	if m != nil {
		return m.ContractAddr
	}
	return ""
}

func (m *QueryNftTransferHistoryRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *QueryNftTransferHistoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryNftTransferHistoryResponse struct {
	NftTransferStatusDetail []NftTransferStatusDetail `protobuf:"bytes,1,rep,name=nftTransferStatusDetail,proto3" json:"nftTransferStatusDetail"`
	Pagination              *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryNftTransferHistoryResponse) Reset()         { *m = QueryNftTransferHistoryResponse{} }
func (m *QueryNftTransferHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNftTransferHistoryResponse) ProtoMessage()    {}
func (*QueryNftTransferHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f717907769439b8c, []int{21}
}
func (m *QueryNftTransferHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNftTransferHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNftTransferHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNftTransferHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNftTransferHistoryResponse.Merge(m, src)
}
func (m *QueryNftTransferHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNftTransferHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNftTransferHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNftTransferHistoryResponse proto.InternalMessageInfo

func (m *QueryNftTransferHistoryResponse) GetNftTransferStatusDetail() []NftTransferStatusDetail {
	if m != nil {
		return m.NftTransferStatusDetail
	}
	return nil
}

func (m *QueryNftTransferHistoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "nti.nti.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "nti.nti.QueryParamsResponse")
	proto.RegisterType((*QueryGetNftTransferRequest)(nil), "nti.nti.QueryGetNftTransferRequest")
	proto.RegisterType((*QueryGetNftTransferResponse)(nil), "nti.nti.QueryGetNftTransferResponse")
	proto.RegisterType((*QueryAllNftTransferRequest)(nil), "nti.nti.QueryAllNftTransferRequest")
	proto.RegisterType((*QueryAllNftTransferResponse)(nil), "nti.nti.QueryAllNftTransferResponse")
	proto.RegisterType((*QueryGetReservedNftTransferRequest)(nil), "nti.nti.QueryGetReservedNftTransferRequest")
	proto.RegisterType((*QueryGetReservedNftTransferResponse)(nil), "nti.nti.QueryGetReservedNftTransferResponse")
	proto.RegisterType((*QueryAllReservedNftTransferRequest)(nil), "nti.nti.QueryAllReservedNftTransferRequest")
	proto.RegisterType((*QueryAllReservedNftTransferResponse)(nil), "nti.nti.QueryAllReservedNftTransferResponse")
	proto.RegisterType((*QueryGetNftTransferStatusRequest)(nil), "nti.nti.QueryGetNftTransferStatusRequest")
	proto.RegisterType((*QueryGetNftTransferStatusResponse)(nil), "nti.nti.QueryGetNftTransferStatusResponse")
	proto.RegisterType((*QueryGetNftMintRequest)(nil), "nti.nti.QueryGetNftMintRequest")
	proto.RegisterType((*QueryGetNftMintResponse)(nil), "nti.nti.QueryGetNftMintResponse")
	proto.RegisterType((*QueryAllNftMintRequest)(nil), "nti.nti.QueryAllNftMintRequest")
	proto.RegisterType((*QueryAllNftMintResponse)(nil), "nti.nti.QueryAllNftMintResponse")
	proto.RegisterType((*QueryNftTransferStatusOfTokenRequest)(nil), "nti.nti.QueryNftTransferStatusOfTokenRequest")
	proto.RegisterType((*QueryNftTransferStatusOfTokenResponse)(nil), "nti.nti.QueryNftTransferStatusOfTokenResponse")
	proto.RegisterType((*QueryNftTransferStatusOfAddressRequest)(nil), "nti.nti.QueryNftTransferStatusOfAddressRequest")
	proto.RegisterType((*QueryNftTransferStatusOfAddressResponse)(nil), "nti.nti.QueryNftTransferStatusOfAddressResponse")
	proto.RegisterType((*QueryNftTransferHistoryRequest)(nil), "nti.nti.QueryNftTransferHistoryRequest")
	proto.RegisterType((*QueryNftTransferHistoryResponse)(nil), "nti.nti.QueryNftTransferHistoryResponse")
}

func init() { proto.RegisterFile("nti/query.proto", fileDescriptor_f717907769439b8c) }

var fileDescriptor_f717907769439b8c = []byte{
	// 1114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x98, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x33, 0xdd, 0x26, 0x51, 0x5f, 0x2a, 0xd2, 0x4c, 0x42, 0x12, 0xdc, 0xc4, 0xbb, 0x75,
	0xd3, 0xa4, 0x3f, 0xed, 0x36, 0x70, 0x42, 0x55, 0x45, 0xaa, 0x28, 0x2d, 0xaa, 0x08, 0x65, 0xc9,
	0x09, 0x90, 0xb6, 0x4e, 0x76, 0x76, 0x6b, 0x70, 0xec, 0xad, 0x3d, 0x29, 0x0d, 0xab, 0x15, 0x12,
	0x7f, 0x41, 0x25, 0xb8, 0x71, 0x45, 0xbd, 0xf2, 0x0f, 0x70, 0x42, 0x20, 0x15, 0x89, 0x43, 0x05,
	0x1c, 0x38, 0x21, 0x94, 0xc0, 0xff, 0x81, 0x3c, 0xf3, 0x76, 0x63, 0xaf, 0xc7, 0xf6, 0xd2, 0xee,
	0x25, 0xb7, 0xec, 0xcc, 0xfb, 0xf1, 0xf9, 0xbe, 0x37, 0xf6, 0x3c, 0x07, 0x26, 0x3d, 0xee, 0x58,
	0x8f, 0xf6, 0x58, 0xb0, 0x6f, 0xb6, 0x02, 0x9f, 0xfb, 0x74, 0xdc, 0xe3, 0x8e, 0xe9, 0x71, 0x47,
	0x9b, 0x69, 0xfa, 0x4d, 0x5f, 0xac, 0x59, 0xd1, 0x5f, 0x72, 0x5b, 0x5b, 0x68, 0xfa, 0x7e, 0xd3,
	0x65, 0x96, 0xdd, 0x72, 0x2c, 0xdb, 0xf3, 0x7c, 0x6e, 0x73, 0xc7, 0xf7, 0x42, 0xdc, 0xbd, 0xbc,
	0xe3, 0x87, 0xbb, 0x7e, 0x68, 0x6d, 0xdb, 0x21, 0x93, 0x51, 0xad, 0xc7, 0x37, 0xb6, 0x19, 0xb7,
	0x6f, 0x58, 0x2d, 0xbb, 0xe9, 0x78, 0xc2, 0x18, 0x6d, 0xcf, 0x44, 0x99, 0x5b, 0x76, 0x60, 0xef,
	0x76, 0xbd, 0x67, 0xa3, 0x15, 0xaf, 0xc1, 0x6b, 0x3c, 0xb0, 0xbd, 0xb0, 0xc1, 0x02, 0x5c, 0x2f,
	0x47, 0xeb, 0x01, 0x0b, 0x59, 0xf0, 0x98, 0xd5, 0x6b, 0x0a, 0x83, 0xc5, 0x7e, 0xc7, 0x5a, 0xc8,
	0x6d, 0xbe, 0xd7, 0x8d, 0x4b, 0xbb, 0xdb, 0xbb, 0x8e, 0xc7, 0x71, 0x6d, 0x29, 0xc3, 0xa5, 0x56,
	0x67, 0xdc, 0x76, 0x5c, 0x69, 0x65, 0xcc, 0x00, 0xfd, 0x20, 0x52, 0x71, 0x5f, 0x60, 0x56, 0xd9,
	0xa3, 0x3d, 0x16, 0x72, 0x63, 0x1d, 0xa6, 0x13, 0xab, 0x61, 0xcb, 0xf7, 0x42, 0x46, 0xaf, 0xc1,
	0x98, 0x94, 0x33, 0x4f, 0x2a, 0xe4, 0xe2, 0xc4, 0xea, 0xa4, 0x89, 0xa5, 0x34, 0xa5, 0xe1, 0xed,
	0x93, 0xcf, 0xff, 0x2a, 0x8f, 0x54, 0xd1, 0xc8, 0x58, 0x05, 0x4d, 0x44, 0xb9, 0xc3, 0xf8, 0x66,
	0x83, 0x6f, 0x21, 0x06, 0xe6, 0xa0, 0x33, 0x30, 0xea, 0x78, 0x75, 0xf6, 0x44, 0xc4, 0x3a, 0x55,
	0x95, 0x3f, 0x8c, 0x8f, 0xe1, 0xac, 0xd2, 0x07, 0x09, 0x6e, 0xc2, 0x84, 0x77, 0xb4, 0x8c, 0x18,
	0x33, 0x3d, 0x8c, 0x98, 0x0b, 0xb2, 0xc4, 0xcd, 0x8d, 0x3a, 0x02, 0xad, 0xb9, 0xae, 0x02, 0x68,
	0x03, 0xe0, 0xa8, 0x85, 0x18, 0x7a, 0xd9, 0x94, 0xfd, 0x36, 0xa3, 0x7e, 0x9b, 0xf2, 0x14, 0x61,
	0xbf, 0xcd, 0xfb, 0x76, 0x93, 0xa1, 0x6f, 0x35, 0xe6, 0x69, 0x7c, 0x47, 0x50, 0x43, 0x7f, 0x9a,
	0x2c, 0x0d, 0xa5, 0xff, 0xa1, 0x81, 0xde, 0x49, 0x50, 0x9e, 0x10, 0x94, 0x2b, 0x85, 0x94, 0x32,
	0x75, 0x02, 0x73, 0x03, 0x8c, 0x6e, 0xa5, 0xab, 0x78, 0xf2, 0x14, 0x45, 0xa9, 0xc0, 0x44, 0xf7,
	0x5c, 0xde, 0x63, 0xfb, 0xd8, 0xab, 0xf8, 0x92, 0xd1, 0x86, 0xf3, 0xb9, 0x71, 0x50, 0xf5, 0x16,
	0x4c, 0x07, 0xe9, 0x6d, 0x2c, 0xf3, 0x42, 0x4f, 0xbd, 0x22, 0x04, 0x56, 0x41, 0xe5, 0x6e, 0xb8,
	0x28, 0x62, 0xcd, 0x75, 0x73, 0x44, 0x0c, 0xab, 0xb3, 0x3f, 0x11, 0xd4, 0x9a, 0x95, 0xae, 0x48,
	0x6b, 0xe9, 0x15, 0xb4, 0x0e, 0xaf, 0xf3, 0x06, 0x54, 0x14, 0xcf, 0xd8, 0x87, 0xe2, 0xed, 0xd0,
	0x7d, 0x03, 0x84, 0x70, 0x2e, 0xc7, 0x06, 0x75, 0x6e, 0xc2, 0x54, 0x6a, 0x13, 0xcb, 0xab, 0xa9,
	0xce, 0xb3, 0xb4, 0x40, 0x8d, 0x69, 0x57, 0xe3, 0x6d, 0x98, 0x8d, 0x25, 0x7d, 0xcf, 0xf1, 0xf8,
	0xe0, 0xc7, 0xf0, 0x1e, 0xcc, 0xa5, 0x7c, 0x11, 0xf3, 0x3a, 0x8c, 0x7b, 0x72, 0x09, 0xe1, 0xce,
	0xc4, 0xe1, 0xa2, 0x75, 0x44, 0xea, 0x9a, 0x19, 0x0f, 0x10, 0x44, 0x3e, 0xc1, 0x71, 0x90, 0x61,
	0x1d, 0xa5, 0x6f, 0x08, 0xf2, 0xc6, 0x53, 0xa8, 0x78, 0x4b, 0x03, 0xf0, 0x0e, 0xef, 0x68, 0xfc,
	0x48, 0x60, 0x49, 0x60, 0xa5, 0x9a, 0xf3, 0x7e, 0x63, 0xcb, 0xff, 0x8c, 0x79, 0xb1, 0xb7, 0xf7,
	0xce, 0x43, 0xdb, 0x91, 0x25, 0x18, 0xad, 0xca, 0x1f, 0xd4, 0x80, 0xd3, 0x3b, 0xbe, 0xc7, 0x03,
	0x7b, 0x87, 0xaf, 0xd5, 0xeb, 0x81, 0x20, 0x39, 0x55, 0x4d, 0xac, 0xd1, 0x79, 0x18, 0xe7, 0x51,
	0xa4, 0x77, 0xeb, 0xf3, 0x25, 0xb1, 0xdd, 0xfd, 0xd9, 0x57, 0xdb, 0x93, 0x2f, 0x5d, 0xdb, 0xdf,
	0x08, 0x5c, 0x28, 0x10, 0x81, 0x95, 0x7e, 0x00, 0x73, 0x5e, 0xbf, 0xcd, 0xba, 0xb8, 0x1e, 0xb1,
	0xf2, 0x95, 0xec, 0x63, 0x2c, 0xed, 0xb0, 0x13, 0x59, 0x61, 0x86, 0xd7, 0x99, 0x67, 0x04, 0x96,
	0xb3, 0x44, 0x45, 0x75, 0x65, 0x61, 0x98, 0xdf, 0x1b, 0x1d, 0xe0, 0x73, 0xdb, 0x75, 0x59, 0xbc,
	0x33, 0xb1, 0x95, 0xbe, 0xea, 0x97, 0x5e, 0xba, 0xfa, 0x7f, 0x10, 0x58, 0x29, 0x04, 0x3d, 0x7e,
	0xf5, 0xff, 0x81, 0x80, 0xde, 0x2f, 0xeb, 0xae, 0x13, 0x72, 0x3f, 0xd8, 0x3f, 0x0e, 0xcf, 0xc4,
	0xaf, 0x04, 0xca, 0x99, 0xf8, 0xc7, 0xae, 0x1b, 0xab, 0xff, 0x9e, 0x86, 0x51, 0x21, 0x87, 0x7e,
	0x02, 0x63, 0x72, 0xf8, 0xa4, 0x67, 0x7b, 0x74, 0xe9, 0x89, 0x56, 0x5b, 0x50, 0x6f, 0xca, 0xd0,
	0xc6, 0xdc, 0x57, 0xbf, 0xff, 0xf3, 0xf5, 0x89, 0x29, 0x3a, 0x69, 0x89, 0xa1, 0xb9, 0x37, 0xb6,
	0xd3, 0x2f, 0x61, 0x22, 0x7e, 0x05, 0x9f, 0x4f, 0x46, 0x51, 0x0e, 0xb6, 0xda, 0x52, 0xbe, 0x11,
	0xa6, 0xbc, 0x20, 0x52, 0x96, 0xe9, 0x62, 0x2f, 0x65, 0x7c, 0x56, 0xb7, 0xda, 0x62, 0x1c, 0xee,
	0xd0, 0x2f, 0xe0, 0xb5, 0x98, 0xf7, 0x9a, 0xeb, 0xf6, 0x33, 0x28, 0x67, 0xd9, 0x7e, 0x06, 0xf5,
	0x24, 0x6a, 0x2c, 0x0a, 0x86, 0x39, 0xfa, 0xba, 0x92, 0x81, 0x3e, 0x23, 0x30, 0xad, 0x98, 0x51,
	0xe8, 0x95, 0x94, 0xc0, 0xec, 0xd9, 0x4b, 0xbb, 0x3a, 0x98, 0x31, 0x12, 0xbd, 0x25, 0x88, 0x4c,
	0x7a, 0xb5, 0x47, 0xa4, 0xfc, 0x2a, 0xb2, 0xda, 0xb1, 0xab, 0xbf, 0x43, 0xbf, 0x25, 0x30, 0xab,
	0x88, 0x1a, 0x55, 0xeb, 0x4a, 0xaa, 0x10, 0x83, 0xb3, 0xe6, 0x4f, 0x79, 0xc6, 0xb2, 0x60, 0xad,
	0x50, 0x3d, 0x9f, 0x95, 0x3e, 0x25, 0x8a, 0x31, 0x89, 0x5e, 0xca, 0x3b, 0x25, 0x89, 0x59, 0x4c,
	0xbb, 0x3c, 0x88, 0x29, 0x42, 0x2d, 0x09, 0x28, 0x9d, 0x2e, 0x28, 0x5b, 0x8a, 0x9f, 0x80, 0x74,
	0x0f, 0xc6, 0x71, 0x92, 0xa0, 0x65, 0x55, 0xf0, 0xd8, 0xc4, 0xa3, 0x55, 0xb2, 0x0d, 0x30, 0xe7,
	0x8a, 0xc8, 0x79, 0x8e, 0x96, 0x13, 0x39, 0xa3, 0x4f, 0xd1, 0xbe, 0x3e, 0x7d, 0x0a, 0x80, 0xbe,
	0x51, 0x6b, 0xca, 0xaa, 0x33, 0x9a, 0x93, 0x39, 0x3d, 0x29, 0x19, 0x6f, 0x88, 0xcc, 0xd3, 0x74,
	0x2a, 0x95, 0x99, 0xfe, 0x42, 0x60, 0x3e, 0xeb, 0xfe, 0xa7, 0xd7, 0x92, 0x91, 0x0b, 0x86, 0x1d,
	0xcd, 0x1c, 0xd4, 0x1c, 0xb1, 0x36, 0x05, 0xd6, 0x5d, 0xba, 0x91, 0xd7, 0x84, 0x9a, 0xdf, 0xa8,
	0x89, 0xb7, 0xbc, 0xd5, 0x16, 0x17, 0x45, 0xc7, 0x6a, 0xc7, 0xef, 0x84, 0x8e, 0xd5, 0xc6, 0x3b,
	0xa0, 0x43, 0x7f, 0x26, 0xa0, 0x65, 0xdf, 0xa6, 0xd4, 0x2a, 0xc4, 0x4b, 0x0e, 0x08, 0xda, 0xf5,
	0xc1, 0x1d, 0x50, 0xd1, 0xba, 0x50, 0x74, 0x8b, 0xde, 0x2c, 0x52, 0x64, 0x4b, 0xc7, 0x23, 0x4d,
	0x47, 0x13, 0x46, 0x87, 0x7e, 0x4f, 0x80, 0xa6, 0xef, 0x1f, 0xba, 0x92, 0x89, 0x93, 0xbc, 0x60,
	0xb5, 0x8b, 0xc5, 0x86, 0xc8, 0xbb, 0x21, 0x78, 0xdf, 0xa1, 0xb7, 0xd4, 0xbc, 0x0f, 0xa5, 0x79,
	0x61, 0xe5, 0x6f, 0x5f, 0x7a, 0x7e, 0xa0, 0x93, 0x17, 0x07, 0x3a, 0xf9, 0xfb, 0x40, 0x27, 0x4f,
	0x0f, 0xf5, 0x91, 0x17, 0x87, 0xfa, 0xc8, 0x9f, 0x87, 0xfa, 0xc8, 0x47, 0xe2, 0xdf, 0x4a, 0x4f,
	0x44, 0x68, 0xbe, 0xdf, 0x62, 0xe1, 0xf6, 0x98, 0xf8, 0x87, 0xca, 0x9b, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x8e, 0x48, 0x9b, 0x4d, 0x70, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a NftTransfer by index.
	NftTransfer(ctx context.Context, in *QueryGetNftTransferRequest, opts ...grpc.CallOption) (*QueryGetNftTransferResponse, error)
	// Queries a list of NftTransfer items.
	NftTransferAll(ctx context.Context, in *QueryAllNftTransferRequest, opts ...grpc.CallOption) (*QueryAllNftTransferResponse, error)
	// Queries a ReservedNftTransfer by index.
	ReservedNftTransfer(ctx context.Context, in *QueryGetReservedNftTransferRequest, opts ...grpc.CallOption) (*QueryGetReservedNftTransferResponse, error)
	// Queries a list of ReservedNftTransfer items.
	ReservedNftTransferAll(ctx context.Context, in *QueryAllReservedNftTransferRequest, opts ...grpc.CallOption) (*QueryAllReservedNftTransferResponse, error)
	// Queries a NftTransferStatus by index.
	NftTransferStatus(ctx context.Context, in *QueryGetNftTransferStatusRequest, opts ...grpc.CallOption) (*QueryGetNftTransferStatusResponse, error)
	// Queries a NftMint by index.
	NftMint(ctx context.Context, in *QueryGetNftMintRequest, opts ...grpc.CallOption) (*QueryGetNftMintResponse, error)
	// Queries a list of NftMint items.
	NftMintAll(ctx context.Context, in *QueryAllNftMintRequest, opts ...grpc.CallOption) (*QueryAllNftMintResponse, error)
	// Queries a list of NftTransferStatusOfToken items.
	NftTransferStatusOfToken(ctx context.Context, in *QueryNftTransferStatusOfTokenRequest, opts ...grpc.CallOption) (*QueryNftTransferStatusOfTokenResponse, error)
	// Queries a list of NftTransferStatusOfAddress items.
	NftTransferStatusOfAddress(ctx context.Context, in *QueryNftTransferStatusOfAddressRequest, opts ...grpc.CallOption) (*QueryNftTransferStatusOfAddressResponse, error)
	// Queries a list of NftTransferHistory items.
	NftTransferHistory(ctx context.Context, in *QueryNftTransferHistoryRequest, opts ...grpc.CallOption) (*QueryNftTransferHistoryResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftTransfer(ctx context.Context, in *QueryGetNftTransferRequest, opts ...grpc.CallOption) (*QueryGetNftTransferResponse, error) {
	out := new(QueryGetNftTransferResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/NftTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftTransferAll(ctx context.Context, in *QueryAllNftTransferRequest, opts ...grpc.CallOption) (*QueryAllNftTransferResponse, error) {
	out := new(QueryAllNftTransferResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/NftTransferAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReservedNftTransfer(ctx context.Context, in *QueryGetReservedNftTransferRequest, opts ...grpc.CallOption) (*QueryGetReservedNftTransferResponse, error) {
	out := new(QueryGetReservedNftTransferResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/ReservedNftTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReservedNftTransferAll(ctx context.Context, in *QueryAllReservedNftTransferRequest, opts ...grpc.CallOption) (*QueryAllReservedNftTransferResponse, error) {
	out := new(QueryAllReservedNftTransferResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/ReservedNftTransferAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftTransferStatus(ctx context.Context, in *QueryGetNftTransferStatusRequest, opts ...grpc.CallOption) (*QueryGetNftTransferStatusResponse, error) {
	out := new(QueryGetNftTransferStatusResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/NftTransferStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftMint(ctx context.Context, in *QueryGetNftMintRequest, opts ...grpc.CallOption) (*QueryGetNftMintResponse, error) {
	out := new(QueryGetNftMintResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/NftMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftMintAll(ctx context.Context, in *QueryAllNftMintRequest, opts ...grpc.CallOption) (*QueryAllNftMintResponse, error) {
	out := new(QueryAllNftMintResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/NftMintAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftTransferStatusOfToken(ctx context.Context, in *QueryNftTransferStatusOfTokenRequest, opts ...grpc.CallOption) (*QueryNftTransferStatusOfTokenResponse, error) {
	out := new(QueryNftTransferStatusOfTokenResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/NftTransferStatusOfToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftTransferStatusOfAddress(ctx context.Context, in *QueryNftTransferStatusOfAddressRequest, opts ...grpc.CallOption) (*QueryNftTransferStatusOfAddressResponse, error) {
	out := new(QueryNftTransferStatusOfAddressResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/NftTransferStatusOfAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftTransferHistory(ctx context.Context, in *QueryNftTransferHistoryRequest, opts ...grpc.CallOption) (*QueryNftTransferHistoryResponse, error) {
	out := new(QueryNftTransferHistoryResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Query/NftTransferHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a NftTransfer by index.
	NftTransfer(context.Context, *QueryGetNftTransferRequest) (*QueryGetNftTransferResponse, error)
	// Queries a list of NftTransfer items.
	NftTransferAll(context.Context, *QueryAllNftTransferRequest) (*QueryAllNftTransferResponse, error)
	// Queries a ReservedNftTransfer by index.
	ReservedNftTransfer(context.Context, *QueryGetReservedNftTransferRequest) (*QueryGetReservedNftTransferResponse, error)
	// Queries a list of ReservedNftTransfer items.
	ReservedNftTransferAll(context.Context, *QueryAllReservedNftTransferRequest) (*QueryAllReservedNftTransferResponse, error)
	// Queries a NftTransferStatus by index.
	NftTransferStatus(context.Context, *QueryGetNftTransferStatusRequest) (*QueryGetNftTransferStatusResponse, error)
	// Queries a NftMint by index.
	NftMint(context.Context, *QueryGetNftMintRequest) (*QueryGetNftMintResponse, error)
	// Queries a list of NftMint items.
	NftMintAll(context.Context, *QueryAllNftMintRequest) (*QueryAllNftMintResponse, error)
	// Queries a list of NftTransferStatusOfToken items.
	NftTransferStatusOfToken(context.Context, *QueryNftTransferStatusOfTokenRequest) (*QueryNftTransferStatusOfTokenResponse, error)
	// Queries a list of NftTransferStatusOfAddress items.
	NftTransferStatusOfAddress(context.Context, *QueryNftTransferStatusOfAddressRequest) (*QueryNftTransferStatusOfAddressResponse, error)
	// Queries a list of NftTransferHistory items.
	NftTransferHistory(context.Context, *QueryNftTransferHistoryRequest) (*QueryNftTransferHistoryResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) NftTransfer(ctx context.Context, req *QueryGetNftTransferRequest) (*QueryGetNftTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftTransfer not implemented")
}
func (*UnimplementedQueryServer) NftTransferAll(ctx context.Context, req *QueryAllNftTransferRequest) (*QueryAllNftTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftTransferAll not implemented")
}
func (*UnimplementedQueryServer) ReservedNftTransfer(ctx context.Context, req *QueryGetReservedNftTransferRequest) (*QueryGetReservedNftTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReservedNftTransfer not implemented")
}
func (*UnimplementedQueryServer) ReservedNftTransferAll(ctx context.Context, req *QueryAllReservedNftTransferRequest) (*QueryAllReservedNftTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReservedNftTransferAll not implemented")
}
func (*UnimplementedQueryServer) NftTransferStatus(ctx context.Context, req *QueryGetNftTransferStatusRequest) (*QueryGetNftTransferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftTransferStatus not implemented")
}
func (*UnimplementedQueryServer) NftMint(ctx context.Context, req *QueryGetNftMintRequest) (*QueryGetNftMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftMint not implemented")
}
func (*UnimplementedQueryServer) NftMintAll(ctx context.Context, req *QueryAllNftMintRequest) (*QueryAllNftMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftMintAll not implemented")
}
func (*UnimplementedQueryServer) NftTransferStatusOfToken(ctx context.Context, req *QueryNftTransferStatusOfTokenRequest) (*QueryNftTransferStatusOfTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftTransferStatusOfToken not implemented")
}
func (*UnimplementedQueryServer) NftTransferStatusOfAddress(ctx context.Context, req *QueryNftTransferStatusOfAddressRequest) (*QueryNftTransferStatusOfAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftTransferStatusOfAddress not implemented")
}
func (*UnimplementedQueryServer) NftTransferHistory(ctx context.Context, req *QueryNftTransferHistoryRequest) (*QueryNftTransferHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftTransferHistory not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/NftTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftTransfer(ctx, req.(*QueryGetNftTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftTransferAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNftTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftTransferAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/NftTransferAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftTransferAll(ctx, req.(*QueryAllNftTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReservedNftTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReservedNftTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReservedNftTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/ReservedNftTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReservedNftTransfer(ctx, req.(*QueryGetReservedNftTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReservedNftTransferAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReservedNftTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReservedNftTransferAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/ReservedNftTransferAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReservedNftTransferAll(ctx, req.(*QueryAllReservedNftTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftTransferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftTransferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftTransferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/NftTransferStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftTransferStatus(ctx, req.(*QueryGetNftTransferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/NftMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftMint(ctx, req.(*QueryGetNftMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftMintAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNftMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftMintAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/NftMintAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftMintAll(ctx, req.(*QueryAllNftMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftTransferStatusOfToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNftTransferStatusOfTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftTransferStatusOfToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/NftTransferStatusOfToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftTransferStatusOfToken(ctx, req.(*QueryNftTransferStatusOfTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftTransferStatusOfAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNftTransferStatusOfAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftTransferStatusOfAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/NftTransferStatusOfAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftTransferStatusOfAddress(ctx, req.(*QueryNftTransferStatusOfAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftTransferHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNftTransferHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftTransferHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Query/NftTransferHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftTransferHistory(ctx, req.(*QueryNftTransferHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nti.nti.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "NftTransfer",
			Handler:    _Query_NftTransfer_Handler,
		},
		{
			MethodName: "NftTransferAll",
			Handler:    _Query_NftTransferAll_Handler,
		},
		{
			MethodName: "ReservedNftTransfer",
			Handler:    _Query_ReservedNftTransfer_Handler,
		},
		{
			MethodName: "ReservedNftTransferAll",
			Handler:    _Query_ReservedNftTransferAll_Handler,
		},
		{
			MethodName: "NftTransferStatus",
			Handler:    _Query_NftTransferStatus_Handler,
		},
		{
			MethodName: "NftMint",
			Handler:    _Query_NftMint_Handler,
		},
		{
			MethodName: "NftMintAll",
			Handler:    _Query_NftMintAll_Handler,
		},
		{
			MethodName: "NftTransferStatusOfToken",
			Handler:    _Query_NftTransferStatusOfToken_Handler,
		},
		{
			MethodName: "NftTransferStatusOfAddress",
			Handler:    _Query_NftTransferStatusOfAddress_Handler,
		},
		{
			MethodName: "NftTransferHistory",
			Handler:    _Query_NftTransferHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nti/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNftTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NftTransfer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNftTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNftTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNftTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNftTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNftTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNftTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftTransfer) > 0 {
		for iNdEx := len(m.NftTransfer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftTransfer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReservedNftTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReservedNftTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReservedNftTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReservedKey) > 0 {
		i -= len(m.ReservedKey)
		copy(dAtA[i:], m.ReservedKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReservedKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReservedNftTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReservedNftTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReservedNftTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ReservedNftTransfer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllReservedNftTransferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReservedNftTransferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReservedNftTransferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReservedNftTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReservedNftTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReservedNftTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReservedNftTransfer) > 0 {
		for iNdEx := len(m.ReservedNftTransfer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReservedNftTransfer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftTransferStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftTransferStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftTransferStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetNftTransferStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftTransferStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftTransferStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NftTransferStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNftMintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftMintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftMintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReservedKey) > 0 {
		i -= len(m.ReservedKey)
		copy(dAtA[i:], m.ReservedKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReservedKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NftMint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllNftMintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNftMintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNftMintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNftMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNftMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNftMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftMint) > 0 {
		for iNdEx := len(m.NftMint) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftMint[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNftTransferStatusOfTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftTransferStatusOfTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftTransferStatusOfTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNftTransferStatusOfTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftTransferStatusOfTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftTransferStatusOfTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftTransferStatusDetail) > 0 {
		for iNdEx := len(m.NftTransferStatusDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftTransferStatusDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNftTransferStatusOfAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftTransferStatusOfAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftTransferStatusOfAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WalletAddr) > 0 {
		i -= len(m.WalletAddr)
		copy(dAtA[i:], m.WalletAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNftTransferStatusOfAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftTransferStatusOfAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftTransferStatusOfAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftTransferStatusDetail) > 0 {
		for iNdEx := len(m.NftTransferStatusDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftTransferStatusDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNftTransferHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftTransferHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftTransferHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddr) > 0 {
		i -= len(m.ContractAddr)
		copy(dAtA[i:], m.ContractAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Chain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNftTransferHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNftTransferHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNftTransferHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftTransferStatusDetail) > 0 {
		for iNdEx := len(m.NftTransferStatusDetail) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftTransferStatusDetail[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNftTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftTransfer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNftTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNftTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftTransfer) > 0 {
		for _, e := range m.NftTransfer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReservedNftTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReservedKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReservedNftTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReservedNftTransfer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllReservedNftTransferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReservedNftTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ReservedNftTransfer) > 0 {
		for _, e := range m.ReservedNftTransfer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftTransferStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetNftTransferStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftTransferStatus.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNftMintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReservedKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NftMint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllNftMintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNftMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftMint) > 0 {
		for _, e := range m.NftMint {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNftTransferStatusOfTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != 0 {
		n += 1 + sovQuery(uint64(m.Chain))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNftTransferStatusOfTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftTransferStatusDetail) > 0 {
		for _, e := range m.NftTransferStatusDetail {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNftTransferStatusOfAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != 0 {
		n += 1 + sovQuery(uint64(m.Chain))
	}
	l = len(m.WalletAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNftTransferStatusOfAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftTransferStatusDetail) > 0 {
		for _, e := range m.NftTransferStatusDetail {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNftTransferHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chain != 0 {
		n += 1 + sovQuery(uint64(m.Chain))
	}
	l = len(m.ContractAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNftTransferHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftTransferStatusDetail) > 0 {
		for _, e := range m.NftTransferStatusDetail {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftTransfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNftTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNftTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNftTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNftTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNftTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNftTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftTransfer = append(m.NftTransfer, NftTransfer{})
			if err := m.NftTransfer[len(m.NftTransfer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReservedNftTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReservedNftTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReservedNftTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReservedNftTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReservedNftTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReservedNftTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedNftTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReservedNftTransfer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReservedNftTransferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReservedNftTransferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReservedNftTransferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReservedNftTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReservedNftTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReservedNftTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedNftTransfer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedNftTransfer = append(m.ReservedNftTransfer, ReservedNftTransfer{})
			if err := m.ReservedNftTransfer[len(m.ReservedNftTransfer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftTransferStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftTransferStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftTransferStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftTransferStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftTransferStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftTransferStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTransferStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftTransferStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftMintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftMintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftMintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftMint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftMint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNftMintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNftMintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNftMintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNftMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNftMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNftMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftMint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftMint = append(m.NftMint, NftMint{})
			if err := m.NftMint[len(m.NftMint)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftTransferStatusOfTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftTransferStatusOfTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftTransferStatusOfTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftTransferStatusOfTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftTransferStatusOfTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftTransferStatusOfTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTransferStatusDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftTransferStatusDetail = append(m.NftTransferStatusDetail, NftTransferStatusDetail{})
			if err := m.NftTransferStatusDetail[len(m.NftTransferStatusDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftTransferStatusOfAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftTransferStatusOfAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftTransferStatusOfAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftTransferStatusOfAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftTransferStatusOfAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftTransferStatusOfAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTransferStatusDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftTransferStatusDetail = append(m.NftTransferStatusDetail, NftTransferStatusDetail{})
			if err := m.NftTransferStatusDetail[len(m.NftTransferStatusDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftTransferHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftTransferHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftTransferHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNftTransferHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNftTransferHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNftTransferHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTransferStatusDetail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftTransferStatusDetail = append(m.NftTransferStatusDetail, NftTransferStatusDetail{})
			if err := m.NftTransferStatusDetail[len(m.NftTransferStatusDetail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
