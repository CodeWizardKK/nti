// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nti/nft_transfer_status_detail.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NftTransferStatusDetail struct {
	ReservedKey     string               `protobuf:"bytes,1,opt,name=reservedKey,proto3" json:"reservedKey,omitempty"`
	ReservedData    *ReservedNftTransfer `protobuf:"bytes,2,opt,name=reservedData,proto3" json:"reservedData,omitempty"`
	TransferStatus  int32                `protobuf:"varint,3,opt,name=transferStatus,proto3" json:"transferStatus,omitempty"`
	TransactionHash string               `protobuf:"bytes,4,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
}

func (m *NftTransferStatusDetail) Reset()         { *m = NftTransferStatusDetail{} }
func (m *NftTransferStatusDetail) String() string { return proto.CompactTextString(m) }
func (*NftTransferStatusDetail) ProtoMessage()    {}
func (*NftTransferStatusDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_8999ace8997f812b, []int{0}
}
func (m *NftTransferStatusDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftTransferStatusDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftTransferStatusDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftTransferStatusDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftTransferStatusDetail.Merge(m, src)
}
func (m *NftTransferStatusDetail) XXX_Size() int {
	return m.Size()
}
func (m *NftTransferStatusDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_NftTransferStatusDetail.DiscardUnknown(m)
}

var xxx_messageInfo_NftTransferStatusDetail proto.InternalMessageInfo

func (m *NftTransferStatusDetail) GetReservedKey() string {
	if m != nil {
		return m.ReservedKey
	}
	return ""
}

func (m *NftTransferStatusDetail) GetReservedData() *ReservedNftTransfer {
	if m != nil {
		return m.ReservedData
	}
	return nil
}

func (m *NftTransferStatusDetail) GetTransferStatus() int32 {
	if m != nil {
		return m.TransferStatus
	}
	return 0
}

func (m *NftTransferStatusDetail) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func init() {
	proto.RegisterType((*NftTransferStatusDetail)(nil), "nti.nti.NftTransferStatusDetail")
}

func init() {
	proto.RegisterFile("nti/nft_transfer_status_detail.proto", fileDescriptor_8999ace8997f812b)
}

var fileDescriptor_8999ace8997f812b = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc9, 0x2b, 0xc9, 0xd4,
	0xcf, 0x4b, 0x2b, 0x89, 0x2f, 0x29, 0x4a, 0xcc, 0x2b, 0x4e, 0x4b, 0x2d, 0x8a, 0x2f, 0x2e, 0x49,
	0x2c, 0x29, 0x2d, 0x8e, 0x4f, 0x49, 0x2d, 0x49, 0xcc, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0xcf, 0x2b, 0xc9, 0xd4, 0xcb, 0x2b, 0xc9, 0x94, 0x92, 0x07, 0x29, 0x2f, 0x4a, 0x2d,
	0x4e, 0x2d, 0x2a, 0x4b, 0x4d, 0x89, 0x47, 0xd6, 0x07, 0x51, 0xa9, 0x74, 0x9e, 0x91, 0x4b, 0xdc,
	0x2f, 0xad, 0x24, 0x04, 0x2a, 0x1a, 0x0c, 0x36, 0xcc, 0x05, 0x6c, 0x96, 0x90, 0x02, 0x17, 0x37,
	0x4c, 0xab, 0x77, 0x6a, 0xa5, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0xb2, 0x90, 0x90, 0x03,
	0x17, 0x0f, 0x8c, 0xeb, 0x92, 0x58, 0x92, 0x28, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa3,
	0x07, 0xb5, 0x5e, 0x2f, 0x08, 0x2a, 0x89, 0x64, 0x43, 0x10, 0x8a, 0x0e, 0x21, 0x35, 0x2e, 0xbe,
	0x12, 0x14, 0xbb, 0x25, 0x98, 0x15, 0x18, 0x35, 0x58, 0x83, 0xd0, 0x44, 0x85, 0x34, 0xb8, 0xf8,
	0xc1, 0x22, 0x89, 0xc9, 0x25, 0x99, 0xf9, 0x79, 0x1e, 0x89, 0xc5, 0x19, 0x12, 0x2c, 0x60, 0xf7,
	0xa0, 0x0b, 0x3b, 0x69, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72,
	0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x14, 0x3f,
	0x28, 0x30, 0x2a, 0xf4, 0x41, 0x64, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38, 0x0c, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x1d, 0xdd, 0x2a, 0x55, 0x01, 0x00, 0x00,
}

func (m *NftTransferStatusDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftTransferStatusDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftTransferStatusDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintNftTransferStatusDetail(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.TransferStatus != 0 {
		i = encodeVarintNftTransferStatusDetail(dAtA, i, uint64(m.TransferStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.ReservedData != nil {
		{
			size, err := m.ReservedData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNftTransferStatusDetail(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReservedKey) > 0 {
		i -= len(m.ReservedKey)
		copy(dAtA[i:], m.ReservedKey)
		i = encodeVarintNftTransferStatusDetail(dAtA, i, uint64(len(m.ReservedKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNftTransferStatusDetail(dAtA []byte, offset int, v uint64) int {
	offset -= sovNftTransferStatusDetail(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NftTransferStatusDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReservedKey)
	if l > 0 {
		n += 1 + l + sovNftTransferStatusDetail(uint64(l))
	}
	if m.ReservedData != nil {
		l = m.ReservedData.Size()
		n += 1 + l + sovNftTransferStatusDetail(uint64(l))
	}
	if m.TransferStatus != 0 {
		n += 1 + sovNftTransferStatusDetail(uint64(m.TransferStatus))
	}
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovNftTransferStatusDetail(uint64(l))
	}
	return n
}

func sovNftTransferStatusDetail(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNftTransferStatusDetail(x uint64) (n int) {
	return sovNftTransferStatusDetail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftTransferStatusDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftTransferStatusDetail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftTransferStatusDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftTransferStatusDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftTransferStatusDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftTransferStatusDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftTransferStatusDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftTransferStatusDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftTransferStatusDetail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftTransferStatusDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReservedData == nil {
				m.ReservedData = &ReservedNftTransfer{}
			}
			if err := m.ReservedData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferStatus", wireType)
			}
			m.TransferStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftTransferStatusDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransferStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftTransferStatusDetail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftTransferStatusDetail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftTransferStatusDetail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftTransferStatusDetail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftTransferStatusDetail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNftTransferStatusDetail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNftTransferStatusDetail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftTransferStatusDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftTransferStatusDetail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNftTransferStatusDetail
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNftTransferStatusDetail
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNftTransferStatusDetail
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNftTransferStatusDetail        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNftTransferStatusDetail          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNftTransferStatusDetail = fmt.Errorf("proto: unexpected end of group")
)
