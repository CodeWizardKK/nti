// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nti/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgReserveNftTransfer struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftTokenId    string `protobuf:"bytes,2,opt,name=nftTokenId,proto3" json:"nftTokenId,omitempty"`
	NftSrcChain   int32  `protobuf:"varint,3,opt,name=nftSrcChain,proto3" json:"nftSrcChain,omitempty"`
	NftSrcAddr    string `protobuf:"bytes,4,opt,name=nftSrcAddr,proto3" json:"nftSrcAddr,omitempty"`
	NftDestChain  int32  `protobuf:"varint,5,opt,name=nftDestChain,proto3" json:"nftDestChain,omitempty"`
	NftDestAddr   string `protobuf:"bytes,6,opt,name=nftDestAddr,proto3" json:"nftDestAddr,omitempty"`
	FtChain       int32  `protobuf:"varint,7,opt,name=ftChain,proto3" json:"ftChain,omitempty"`
	FtSrcAddr     string `protobuf:"bytes,8,opt,name=ftSrcAddr,proto3" json:"ftSrcAddr,omitempty"`
	FtDestAddr    string `protobuf:"bytes,9,opt,name=ftDestAddr,proto3" json:"ftDestAddr,omitempty"`
	FungibleToken int32  `protobuf:"varint,10,opt,name=fungibleToken,proto3" json:"fungibleToken,omitempty"`
	BlockHeight   int32  `protobuf:"varint,11,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
}

func (m *MsgReserveNftTransfer) Reset()         { *m = MsgReserveNftTransfer{} }
func (m *MsgReserveNftTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgReserveNftTransfer) ProtoMessage()    {}
func (*MsgReserveNftTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{0}
}
func (m *MsgReserveNftTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReserveNftTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReserveNftTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReserveNftTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReserveNftTransfer.Merge(m, src)
}
func (m *MsgReserveNftTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgReserveNftTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReserveNftTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReserveNftTransfer proto.InternalMessageInfo

func (m *MsgReserveNftTransfer) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgReserveNftTransfer) GetNftTokenId() string {
	if m != nil {
		return m.NftTokenId
	}
	return ""
}

func (m *MsgReserveNftTransfer) GetNftSrcChain() int32 {
	if m != nil {
		return m.NftSrcChain
	}
	return 0
}

func (m *MsgReserveNftTransfer) GetNftSrcAddr() string {
	if m != nil {
		return m.NftSrcAddr
	}
	return ""
}

func (m *MsgReserveNftTransfer) GetNftDestChain() int32 {
	if m != nil {
		return m.NftDestChain
	}
	return 0
}

func (m *MsgReserveNftTransfer) GetNftDestAddr() string {
	if m != nil {
		return m.NftDestAddr
	}
	return ""
}

func (m *MsgReserveNftTransfer) GetFtChain() int32 {
	if m != nil {
		return m.FtChain
	}
	return 0
}

func (m *MsgReserveNftTransfer) GetFtSrcAddr() string {
	if m != nil {
		return m.FtSrcAddr
	}
	return ""
}

func (m *MsgReserveNftTransfer) GetFtDestAddr() string {
	if m != nil {
		return m.FtDestAddr
	}
	return ""
}

func (m *MsgReserveNftTransfer) GetFungibleToken() int32 {
	if m != nil {
		return m.FungibleToken
	}
	return 0
}

func (m *MsgReserveNftTransfer) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type MsgReserveNftTransferResponse struct {
}

func (m *MsgReserveNftTransferResponse) Reset()         { *m = MsgReserveNftTransferResponse{} }
func (m *MsgReserveNftTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReserveNftTransferResponse) ProtoMessage()    {}
func (*MsgReserveNftTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{1}
}
func (m *MsgReserveNftTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReserveNftTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReserveNftTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReserveNftTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReserveNftTransferResponse.Merge(m, src)
}
func (m *MsgReserveNftTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReserveNftTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReserveNftTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReserveNftTransferResponse proto.InternalMessageInfo

type MsgTransferNft struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SrcNftHash  string `protobuf:"bytes,2,opt,name=srcNftHash,proto3" json:"srcNftHash,omitempty"`
	SrcChain    string `protobuf:"bytes,3,opt,name=srcChain,proto3" json:"srcChain,omitempty"`
	SrcAddr     string `protobuf:"bytes,4,opt,name=srcAddr,proto3" json:"srcAddr,omitempty"`
	DestNftHash string `protobuf:"bytes,5,opt,name=destNftHash,proto3" json:"destNftHash,omitempty"`
	DestChain   string `protobuf:"bytes,6,opt,name=destChain,proto3" json:"destChain,omitempty"`
	DestAddr    string `protobuf:"bytes,7,opt,name=destAddr,proto3" json:"destAddr,omitempty"`
}

func (m *MsgTransferNft) Reset()         { *m = MsgTransferNft{} }
func (m *MsgTransferNft) String() string { return proto.CompactTextString(m) }
func (*MsgTransferNft) ProtoMessage()    {}
func (*MsgTransferNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{2}
}
func (m *MsgTransferNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferNft.Merge(m, src)
}
func (m *MsgTransferNft) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferNft) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferNft.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferNft proto.InternalMessageInfo

func (m *MsgTransferNft) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferNft) GetSrcNftHash() string {
	if m != nil {
		return m.SrcNftHash
	}
	return ""
}

func (m *MsgTransferNft) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *MsgTransferNft) GetSrcAddr() string {
	if m != nil {
		return m.SrcAddr
	}
	return ""
}

func (m *MsgTransferNft) GetDestNftHash() string {
	if m != nil {
		return m.DestNftHash
	}
	return ""
}

func (m *MsgTransferNft) GetDestChain() string {
	if m != nil {
		return m.DestChain
	}
	return ""
}

func (m *MsgTransferNft) GetDestAddr() string {
	if m != nil {
		return m.DestAddr
	}
	return ""
}

type MsgTransferNftResponse struct {
}

func (m *MsgTransferNftResponse) Reset()         { *m = MsgTransferNftResponse{} }
func (m *MsgTransferNftResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferNftResponse) ProtoMessage()    {}
func (*MsgTransferNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{3}
}
func (m *MsgTransferNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferNftResponse.Merge(m, src)
}
func (m *MsgTransferNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferNftResponse proto.InternalMessageInfo

type MsgChangeStatus struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ReservedKey string `protobuf:"bytes,2,opt,name=reservedKey,proto3" json:"reservedKey,omitempty"`
	To          int32  `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *MsgChangeStatus) Reset()         { *m = MsgChangeStatus{} }
func (m *MsgChangeStatus) String() string { return proto.CompactTextString(m) }
func (*MsgChangeStatus) ProtoMessage()    {}
func (*MsgChangeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{4}
}
func (m *MsgChangeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeStatus.Merge(m, src)
}
func (m *MsgChangeStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeStatus proto.InternalMessageInfo

func (m *MsgChangeStatus) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgChangeStatus) GetReservedKey() string {
	if m != nil {
		return m.ReservedKey
	}
	return ""
}

func (m *MsgChangeStatus) GetTo() int32 {
	if m != nil {
		return m.To
	}
	return 0
}

type MsgChangeStatusResponse struct {
}

func (m *MsgChangeStatusResponse) Reset()         { *m = MsgChangeStatusResponse{} }
func (m *MsgChangeStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeStatusResponse) ProtoMessage()    {}
func (*MsgChangeStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{5}
}
func (m *MsgChangeStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeStatusResponse.Merge(m, src)
}
func (m *MsgChangeStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeStatusResponse proto.InternalMessageInfo

type MsgCreateNftMint struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ReservedKey     string `protobuf:"bytes,2,opt,name=reservedKey,proto3" json:"reservedKey,omitempty"`
	TransactionHash string `protobuf:"bytes,3,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
}

func (m *MsgCreateNftMint) Reset()         { *m = MsgCreateNftMint{} }
func (m *MsgCreateNftMint) String() string { return proto.CompactTextString(m) }
func (*MsgCreateNftMint) ProtoMessage()    {}
func (*MsgCreateNftMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{6}
}
func (m *MsgCreateNftMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateNftMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateNftMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateNftMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateNftMint.Merge(m, src)
}
func (m *MsgCreateNftMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateNftMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateNftMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateNftMint proto.InternalMessageInfo

func (m *MsgCreateNftMint) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateNftMint) GetReservedKey() string {
	if m != nil {
		return m.ReservedKey
	}
	return ""
}

func (m *MsgCreateNftMint) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

type MsgCreateNftMintResponse struct {
}

func (m *MsgCreateNftMintResponse) Reset()         { *m = MsgCreateNftMintResponse{} }
func (m *MsgCreateNftMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateNftMintResponse) ProtoMessage()    {}
func (*MsgCreateNftMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{7}
}
func (m *MsgCreateNftMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateNftMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateNftMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateNftMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateNftMintResponse.Merge(m, src)
}
func (m *MsgCreateNftMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateNftMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateNftMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateNftMintResponse proto.InternalMessageInfo

type MsgUpdateNftMint struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ReservedKey     string `protobuf:"bytes,2,opt,name=reservedKey,proto3" json:"reservedKey,omitempty"`
	TransactionHash string `protobuf:"bytes,3,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
}

func (m *MsgUpdateNftMint) Reset()         { *m = MsgUpdateNftMint{} }
func (m *MsgUpdateNftMint) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateNftMint) ProtoMessage()    {}
func (*MsgUpdateNftMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{8}
}
func (m *MsgUpdateNftMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateNftMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateNftMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateNftMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateNftMint.Merge(m, src)
}
func (m *MsgUpdateNftMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateNftMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateNftMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateNftMint proto.InternalMessageInfo

func (m *MsgUpdateNftMint) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateNftMint) GetReservedKey() string {
	if m != nil {
		return m.ReservedKey
	}
	return ""
}

func (m *MsgUpdateNftMint) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

type MsgUpdateNftMintResponse struct {
}

func (m *MsgUpdateNftMintResponse) Reset()         { *m = MsgUpdateNftMintResponse{} }
func (m *MsgUpdateNftMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateNftMintResponse) ProtoMessage()    {}
func (*MsgUpdateNftMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{9}
}
func (m *MsgUpdateNftMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateNftMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateNftMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateNftMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateNftMintResponse.Merge(m, src)
}
func (m *MsgUpdateNftMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateNftMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateNftMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateNftMintResponse proto.InternalMessageInfo

type MsgDeleteNftMint struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ReservedKey string `protobuf:"bytes,2,opt,name=reservedKey,proto3" json:"reservedKey,omitempty"`
}

func (m *MsgDeleteNftMint) Reset()         { *m = MsgDeleteNftMint{} }
func (m *MsgDeleteNftMint) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteNftMint) ProtoMessage()    {}
func (*MsgDeleteNftMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{10}
}
func (m *MsgDeleteNftMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteNftMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteNftMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteNftMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteNftMint.Merge(m, src)
}
func (m *MsgDeleteNftMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteNftMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteNftMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteNftMint proto.InternalMessageInfo

func (m *MsgDeleteNftMint) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteNftMint) GetReservedKey() string {
	if m != nil {
		return m.ReservedKey
	}
	return ""
}

type MsgDeleteNftMintResponse struct {
}

func (m *MsgDeleteNftMintResponse) Reset()         { *m = MsgDeleteNftMintResponse{} }
func (m *MsgDeleteNftMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteNftMintResponse) ProtoMessage()    {}
func (*MsgDeleteNftMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_acd35dcbf64f6b22, []int{11}
}
func (m *MsgDeleteNftMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteNftMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteNftMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteNftMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteNftMintResponse.Merge(m, src)
}
func (m *MsgDeleteNftMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteNftMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteNftMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteNftMintResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgReserveNftTransfer)(nil), "nti.nti.MsgReserveNftTransfer")
	proto.RegisterType((*MsgReserveNftTransferResponse)(nil), "nti.nti.MsgReserveNftTransferResponse")
	proto.RegisterType((*MsgTransferNft)(nil), "nti.nti.MsgTransferNft")
	proto.RegisterType((*MsgTransferNftResponse)(nil), "nti.nti.MsgTransferNftResponse")
	proto.RegisterType((*MsgChangeStatus)(nil), "nti.nti.MsgChangeStatus")
	proto.RegisterType((*MsgChangeStatusResponse)(nil), "nti.nti.MsgChangeStatusResponse")
	proto.RegisterType((*MsgCreateNftMint)(nil), "nti.nti.MsgCreateNftMint")
	proto.RegisterType((*MsgCreateNftMintResponse)(nil), "nti.nti.MsgCreateNftMintResponse")
	proto.RegisterType((*MsgUpdateNftMint)(nil), "nti.nti.MsgUpdateNftMint")
	proto.RegisterType((*MsgUpdateNftMintResponse)(nil), "nti.nti.MsgUpdateNftMintResponse")
	proto.RegisterType((*MsgDeleteNftMint)(nil), "nti.nti.MsgDeleteNftMint")
	proto.RegisterType((*MsgDeleteNftMintResponse)(nil), "nti.nti.MsgDeleteNftMintResponse")
}

func init() { proto.RegisterFile("nti/tx.proto", fileDescriptor_acd35dcbf64f6b22) }

var fileDescriptor_acd35dcbf64f6b22 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0xe3, 0x84, 0x34, 0xcd, 0x49, 0xda, 0xa0, 0x91, 0xa0, 0xae, 0x05, 0x6e, 0xb0, 0x10,
	0x0a, 0x9b, 0x54, 0x82, 0x27, 0x80, 0x56, 0xa2, 0x80, 0x9c, 0x45, 0x52, 0x36, 0x08, 0x84, 0x1c,
	0x7b, 0xec, 0x58, 0x0d, 0xe3, 0xc8, 0x73, 0x8a, 0xd2, 0xb7, 0xe0, 0xb1, 0x58, 0x76, 0xc9, 0x82,
	0x05, 0x4a, 0xc4, 0x43, 0xb0, 0x43, 0x33, 0xbe, 0x64, 0x26, 0x4a, 0xb2, 0x01, 0x89, 0xe5, 0xfc,
	0xbf, 0xe6, 0x3b, 0x57, 0x7b, 0xa0, 0xcd, 0x30, 0x3e, 0xc5, 0x79, 0x7f, 0x96, 0x26, 0x98, 0x90,
	0x06, 0xc3, 0xb8, 0xcf, 0x30, 0xb6, 0x88, 0x90, 0x59, 0x88, 0x9f, 0x3e, 0xc7, 0x0c, 0x33, 0xd3,
	0xf9, 0x5d, 0x85, 0x7b, 0x2e, 0x8f, 0x86, 0x94, 0xd3, 0xf4, 0x0b, 0x1d, 0x84, 0x78, 0x99, 0x7a,
	0x8c, 0x87, 0x34, 0x25, 0x26, 0x34, 0xfc, 0x94, 0x7a, 0x98, 0xa4, 0xa6, 0xd1, 0x35, 0x7a, 0xcd,
	0x61, 0x71, 0x24, 0x36, 0x00, 0x0b, 0xf1, 0x32, 0xb9, 0xa2, 0xec, 0x75, 0x60, 0x56, 0xa5, 0xa9,
	0x28, 0xa4, 0x0b, 0x2d, 0x16, 0xe2, 0x28, 0xf5, 0xcf, 0x26, 0x5e, 0xcc, 0xcc, 0x5a, 0xd7, 0xe8,
	0xd5, 0x87, 0xaa, 0x94, 0x13, 0x46, 0xa9, 0xff, 0x22, 0x08, 0x52, 0xf3, 0x4e, 0x49, 0xc8, 0x15,
	0xe2, 0x40, 0x9b, 0x85, 0x78, 0x4e, 0x39, 0x66, 0x88, 0xba, 0x44, 0x68, 0x5a, 0x1e, 0x45, 0x9c,
	0x25, 0x64, 0x4f, 0x42, 0x54, 0x49, 0x54, 0x10, 0xe6, 0x80, 0x86, 0x04, 0x14, 0x47, 0xf2, 0x00,
	0x9a, 0xab, 0xf0, 0xfb, 0xf2, 0xe6, 0x4a, 0x10, 0xd9, 0x29, 0xe0, 0x66, 0x96, 0x9d, 0xc2, 0x7d,
	0x0c, 0x07, 0xe1, 0x35, 0x8b, 0xe2, 0xf1, 0x94, 0xca, 0x92, 0x4d, 0x90, 0x74, 0x5d, 0x14, 0xf9,
	0x8d, 0xa7, 0x89, 0x7f, 0x75, 0x41, 0xe3, 0x68, 0x82, 0x66, 0x2b, 0xeb, 0x82, 0x22, 0x39, 0x27,
	0xf0, 0x70, 0x63, 0xeb, 0x87, 0x94, 0xcf, 0x12, 0xc6, 0xa9, 0xf3, 0xc3, 0x80, 0x43, 0x97, 0x47,
	0x85, 0x3e, 0x08, 0x71, 0xf7, 0x54, 0x78, 0xea, 0x0f, 0x42, 0xbc, 0xf0, 0xf8, 0xa4, 0x98, 0xca,
	0x4a, 0x21, 0x16, 0xec, 0x73, 0x75, 0x24, 0xcd, 0x61, 0x79, 0x16, 0x54, 0xae, 0x0d, 0xa3, 0x38,
	0x8a, 0x2a, 0x02, 0xca, 0xb1, 0xc0, 0xd6, 0xb3, 0x2e, 0x2b, 0x92, 0xe8, 0x65, 0x50, 0x0e, 0x2a,
	0x9b, 0xc2, 0x4a, 0x10, 0x51, 0x83, 0xa2, 0x93, 0x8d, 0x2c, 0x6a, 0x71, 0x76, 0x4c, 0xb8, 0xaf,
	0x57, 0x57, 0x16, 0xfe, 0x11, 0x3a, 0x2e, 0x8f, 0xce, 0x26, 0x1e, 0x8b, 0xe8, 0x08, 0x3d, 0xbc,
	0xe6, 0x3b, 0x0a, 0xef, 0x42, 0x2b, 0xcd, 0x7a, 0x18, 0xbc, 0xa5, 0x37, 0x79, 0xe5, 0xaa, 0x44,
	0x0e, 0xa1, 0x8a, 0x49, 0xbe, 0x87, 0x55, 0x4c, 0x9c, 0x63, 0x38, 0x5a, 0xc3, 0x97, 0x91, 0xe7,
	0x70, 0x57, 0x58, 0x02, 0x2d, 0x46, 0xe2, 0xc6, 0x0c, 0xff, 0x2a, 0x74, 0x0f, 0x3a, 0x28, 0x0a,
	0xf4, 0x7c, 0x8c, 0x13, 0x26, 0x7b, 0x98, 0x35, 0x7f, 0x5d, 0x76, 0x2c, 0x30, 0xd7, 0x23, 0xaf,
	0x65, 0xf5, 0x6e, 0x16, 0xfc, 0xa7, 0xac, 0xb4, 0xc8, 0x65, 0x56, 0x03, 0x99, 0xd5, 0x39, 0x9d,
	0xd2, 0x7f, 0x92, 0x55, 0x1e, 0x4b, 0xe3, 0x15, 0xb1, 0x9e, 0xfd, 0xaa, 0x41, 0xcd, 0xe5, 0x11,
	0xf9, 0x00, 0x64, 0xc3, 0xbf, 0xca, 0xee, 0xe7, 0xff, 0xb8, 0xfe, 0xc6, 0x0f, 0xca, 0x7a, 0xb2,
	0xdb, 0x2f, 0xa2, 0x90, 0x57, 0xd0, 0x52, 0x3f, 0xb6, 0x23, 0xf5, 0x9a, 0x62, 0x58, 0x27, 0x5b,
	0x8c, 0x12, 0xf4, 0x06, 0xda, 0xfa, 0xf6, 0xaa, 0x17, 0x54, 0xc7, 0xea, 0x6e, 0x73, 0x4a, 0x96,
	0x0b, 0x07, 0xfa, 0x3e, 0x1e, 0x6b, 0x57, 0x54, 0xcb, 0x7a, 0xb4, 0xd5, 0x52, 0x71, 0xfa, 0x22,
	0x69, 0x38, 0xcd, 0xd2, 0x71, 0x1b, 0x97, 0x40, 0xe0, 0xf4, 0x0d, 0xd0, 0x70, 0x9a, 0xa5, 0xe3,
	0x36, 0xce, 0xf9, 0xe5, 0xd3, 0x6f, 0x0b, 0xdb, 0xb8, 0x5d, 0xd8, 0xc6, 0xcf, 0x85, 0x6d, 0x7c,
	0x5d, 0xda, 0x95, 0xdb, 0xa5, 0x5d, 0xf9, 0xbe, 0xb4, 0x2b, 0xef, 0x3b, 0xe2, 0xf5, 0x9a, 0x9f,
	0xca, 0xa7, 0xed, 0x66, 0x46, 0xf9, 0x78, 0x4f, 0xbe, 0x60, 0xcf, 0xff, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x1a, 0x8c, 0xe5, 0x82, 0xee, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ReserveNftTransfer(ctx context.Context, in *MsgReserveNftTransfer, opts ...grpc.CallOption) (*MsgReserveNftTransferResponse, error)
	TransferNft(ctx context.Context, in *MsgTransferNft, opts ...grpc.CallOption) (*MsgTransferNftResponse, error)
	ChangeStatus(ctx context.Context, in *MsgChangeStatus, opts ...grpc.CallOption) (*MsgChangeStatusResponse, error)
	CreateNftMint(ctx context.Context, in *MsgCreateNftMint, opts ...grpc.CallOption) (*MsgCreateNftMintResponse, error)
	UpdateNftMint(ctx context.Context, in *MsgUpdateNftMint, opts ...grpc.CallOption) (*MsgUpdateNftMintResponse, error)
	DeleteNftMint(ctx context.Context, in *MsgDeleteNftMint, opts ...grpc.CallOption) (*MsgDeleteNftMintResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ReserveNftTransfer(ctx context.Context, in *MsgReserveNftTransfer, opts ...grpc.CallOption) (*MsgReserveNftTransferResponse, error) {
	out := new(MsgReserveNftTransferResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Msg/ReserveNftTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferNft(ctx context.Context, in *MsgTransferNft, opts ...grpc.CallOption) (*MsgTransferNftResponse, error) {
	out := new(MsgTransferNftResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Msg/TransferNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeStatus(ctx context.Context, in *MsgChangeStatus, opts ...grpc.CallOption) (*MsgChangeStatusResponse, error) {
	out := new(MsgChangeStatusResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Msg/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateNftMint(ctx context.Context, in *MsgCreateNftMint, opts ...grpc.CallOption) (*MsgCreateNftMintResponse, error) {
	out := new(MsgCreateNftMintResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Msg/CreateNftMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateNftMint(ctx context.Context, in *MsgUpdateNftMint, opts ...grpc.CallOption) (*MsgUpdateNftMintResponse, error) {
	out := new(MsgUpdateNftMintResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Msg/UpdateNftMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteNftMint(ctx context.Context, in *MsgDeleteNftMint, opts ...grpc.CallOption) (*MsgDeleteNftMintResponse, error) {
	out := new(MsgDeleteNftMintResponse)
	err := c.cc.Invoke(ctx, "/nti.nti.Msg/DeleteNftMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ReserveNftTransfer(context.Context, *MsgReserveNftTransfer) (*MsgReserveNftTransferResponse, error)
	TransferNft(context.Context, *MsgTransferNft) (*MsgTransferNftResponse, error)
	ChangeStatus(context.Context, *MsgChangeStatus) (*MsgChangeStatusResponse, error)
	CreateNftMint(context.Context, *MsgCreateNftMint) (*MsgCreateNftMintResponse, error)
	UpdateNftMint(context.Context, *MsgUpdateNftMint) (*MsgUpdateNftMintResponse, error)
	DeleteNftMint(context.Context, *MsgDeleteNftMint) (*MsgDeleteNftMintResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ReserveNftTransfer(ctx context.Context, req *MsgReserveNftTransfer) (*MsgReserveNftTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveNftTransfer not implemented")
}
func (*UnimplementedMsgServer) TransferNft(ctx context.Context, req *MsgTransferNft) (*MsgTransferNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferNft not implemented")
}
func (*UnimplementedMsgServer) ChangeStatus(ctx context.Context, req *MsgChangeStatus) (*MsgChangeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (*UnimplementedMsgServer) CreateNftMint(ctx context.Context, req *MsgCreateNftMint) (*MsgCreateNftMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNftMint not implemented")
}
func (*UnimplementedMsgServer) UpdateNftMint(ctx context.Context, req *MsgUpdateNftMint) (*MsgUpdateNftMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNftMint not implemented")
}
func (*UnimplementedMsgServer) DeleteNftMint(ctx context.Context, req *MsgDeleteNftMint) (*MsgDeleteNftMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNftMint not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ReserveNftTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReserveNftTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReserveNftTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Msg/ReserveNftTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReserveNftTransfer(ctx, req.(*MsgReserveNftTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferNft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Msg/TransferNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferNft(ctx, req.(*MsgTransferNft))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Msg/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeStatus(ctx, req.(*MsgChangeStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateNftMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateNftMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateNftMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Msg/CreateNftMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateNftMint(ctx, req.(*MsgCreateNftMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateNftMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateNftMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateNftMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Msg/UpdateNftMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateNftMint(ctx, req.(*MsgUpdateNftMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteNftMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteNftMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteNftMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nti.nti.Msg/DeleteNftMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteNftMint(ctx, req.(*MsgDeleteNftMint))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nti.nti.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReserveNftTransfer",
			Handler:    _Msg_ReserveNftTransfer_Handler,
		},
		{
			MethodName: "TransferNft",
			Handler:    _Msg_TransferNft_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _Msg_ChangeStatus_Handler,
		},
		{
			MethodName: "CreateNftMint",
			Handler:    _Msg_CreateNftMint_Handler,
		},
		{
			MethodName: "UpdateNftMint",
			Handler:    _Msg_UpdateNftMint_Handler,
		},
		{
			MethodName: "DeleteNftMint",
			Handler:    _Msg_DeleteNftMint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nti/tx.proto",
}

func (m *MsgReserveNftTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReserveNftTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReserveNftTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x58
	}
	if m.FungibleToken != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FungibleToken))
		i--
		dAtA[i] = 0x50
	}
	if len(m.FtDestAddr) > 0 {
		i -= len(m.FtDestAddr)
		copy(dAtA[i:], m.FtDestAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FtDestAddr)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FtSrcAddr) > 0 {
		i -= len(m.FtSrcAddr)
		copy(dAtA[i:], m.FtSrcAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FtSrcAddr)))
		i--
		dAtA[i] = 0x42
	}
	if m.FtChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FtChain))
		i--
		dAtA[i] = 0x38
	}
	if len(m.NftDestAddr) > 0 {
		i -= len(m.NftDestAddr)
		copy(dAtA[i:], m.NftDestAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftDestAddr)))
		i--
		dAtA[i] = 0x32
	}
	if m.NftDestChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NftDestChain))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NftSrcAddr) > 0 {
		i -= len(m.NftSrcAddr)
		copy(dAtA[i:], m.NftSrcAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftSrcAddr)))
		i--
		dAtA[i] = 0x22
	}
	if m.NftSrcChain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NftSrcChain))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NftTokenId) > 0 {
		i -= len(m.NftTokenId)
		copy(dAtA[i:], m.NftTokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftTokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReserveNftTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReserveNftTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReserveNftTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestAddr) > 0 {
		i -= len(m.DestAddr)
		copy(dAtA[i:], m.DestAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestAddr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DestChain) > 0 {
		i -= len(m.DestChain)
		copy(dAtA[i:], m.DestChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestChain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DestNftHash) > 0 {
		i -= len(m.DestNftHash)
		copy(dAtA[i:], m.DestNftHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestNftHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SrcAddr) > 0 {
		i -= len(m.SrcAddr)
		copy(dAtA[i:], m.SrcAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SrcChain) > 0 {
		i -= len(m.SrcChain)
		copy(dAtA[i:], m.SrcChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcNftHash) > 0 {
		i -= len(m.SrcNftHash)
		copy(dAtA[i:], m.SrcNftHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SrcNftHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReservedKey) > 0 {
		i -= len(m.ReservedKey)
		copy(dAtA[i:], m.ReservedKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReservedKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateNftMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateNftMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateNftMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReservedKey) > 0 {
		i -= len(m.ReservedKey)
		copy(dAtA[i:], m.ReservedKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReservedKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateNftMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateNftMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateNftMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateNftMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateNftMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateNftMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReservedKey) > 0 {
		i -= len(m.ReservedKey)
		copy(dAtA[i:], m.ReservedKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReservedKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateNftMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateNftMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateNftMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteNftMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteNftMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteNftMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReservedKey) > 0 {
		i -= len(m.ReservedKey)
		copy(dAtA[i:], m.ReservedKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReservedKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteNftMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteNftMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteNftMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgReserveNftTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftTokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NftSrcChain != 0 {
		n += 1 + sovTx(uint64(m.NftSrcChain))
	}
	l = len(m.NftSrcAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NftDestChain != 0 {
		n += 1 + sovTx(uint64(m.NftDestChain))
	}
	l = len(m.NftDestAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FtChain != 0 {
		n += 1 + sovTx(uint64(m.FtChain))
	}
	l = len(m.FtSrcAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FtDestAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FungibleToken != 0 {
		n += 1 + sovTx(uint64(m.FungibleToken))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	return n
}

func (m *MsgReserveNftTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcNftHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SrcAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestNftHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReservedKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.To != 0 {
		n += 1 + sovTx(uint64(m.To))
	}
	return n
}

func (m *MsgChangeStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateNftMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReservedKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateNftMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateNftMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReservedKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateNftMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteNftMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReservedKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteNftMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgReserveNftTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReserveNftTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReserveNftTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSrcChain", wireType)
			}
			m.NftSrcChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftSrcChain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftSrcAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftSrcAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftDestChain", wireType)
			}
			m.NftDestChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NftDestChain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftDestAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftDestAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FtChain", wireType)
			}
			m.FtChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FtChain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FtSrcAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FtSrcAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FtDestAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FtDestAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FungibleToken", wireType)
			}
			m.FungibleToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FungibleToken |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReserveNftTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReserveNftTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReserveNftTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNftHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcNftHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestNftHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestNftHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateNftMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateNftMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateNftMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateNftMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateNftMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateNftMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateNftMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateNftMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateNftMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateNftMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateNftMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateNftMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteNftMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteNftMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteNftMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteNftMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteNftMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteNftMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
