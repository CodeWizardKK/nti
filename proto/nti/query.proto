syntax = "proto3";
package nti.nti;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "nti/params.proto";
import "nti/nft_transfer.proto";
import "nti/reserved_nft_transfer.proto";
import "nti/nft_transfer_status.proto";
import "nti/nft_mint.proto";
import "nti/nft_transfer_status_detail.proto";
// this line is used by starport scaffolding # 1

option go_package = "nti/x/nti/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/nti/nti/params";
  }
  // Queries a NftTransfer by index.
	rpc NftTransfer(QueryGetNftTransferRequest) returns (QueryGetNftTransferResponse) {
		option (google.api.http).get = "/nti/nti/nft_transfer/{index}";
	}

	// Queries a list of NftTransfer items.
	rpc NftTransferAll(QueryAllNftTransferRequest) returns (QueryAllNftTransferResponse) {
		option (google.api.http).get = "/nti/nti/nft_transfer";
	}

// Queries a ReservedNftTransfer by index.
	rpc ReservedNftTransfer(QueryGetReservedNftTransferRequest) returns (QueryGetReservedNftTransferResponse) {
		option (google.api.http).get = "/nti/nti/reserved_nft_transfer/{reservedKey}";
	}

	// Queries a list of ReservedNftTransfer items.
	rpc ReservedNftTransferAll(QueryAllReservedNftTransferRequest) returns (QueryAllReservedNftTransferResponse) {
		option (google.api.http).get = "/nti/nti/reserved_nft_transfer";
	}

// Queries a NftTransferStatus by index.
	rpc NftTransferStatus(QueryGetNftTransferStatusRequest) returns (QueryGetNftTransferStatusResponse) {
		option (google.api.http).get = "/nti/nti/nft_transfer_status";
	}
// Queries a NftMint by index.
	rpc NftMint(QueryGetNftMintRequest) returns (QueryGetNftMintResponse) {
		option (google.api.http).get = "/nti/nti/nft_mint/{reservedKey}";
	}

	// Queries a list of NftMint items.
	rpc NftMintAll(QueryAllNftMintRequest) returns (QueryAllNftMintResponse) {
		option (google.api.http).get = "/nti/nti/nft_mint";
	}

// Queries a list of NftTransferStatusOfToken items.
	rpc NftTransferStatusOfToken(QueryNftTransferStatusOfTokenRequest) returns (QueryNftTransferStatusOfTokenResponse) {
		option (google.api.http).get = "/nti/nti/nft_transfer_status_of_token/{chain}/{contractAddr}/{tokenId}";
	}

// Queries a list of NftTransferStatusOfAddress items.
	rpc NftTransferStatusOfAddress(QueryNftTransferStatusOfAddressRequest) returns (QueryNftTransferStatusOfAddressResponse) {
		option (google.api.http).get = "/nti/nti/nft_transfer_status_of_address/{chain}/{walletAddr}";
	}

// Queries a list of NftTransferHistory items.
	rpc NftTransferHistory(QueryNftTransferHistoryRequest) returns (QueryNftTransferHistoryResponse) {
		option (google.api.http).get = "/nti/nti/nft_transfer_history/{chain}/{contractAddr}/{tokenId}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetNftTransferRequest {
	  string index = 1;

}

message QueryGetNftTransferResponse {
	NftTransfer nftTransfer = 1 [(gogoproto.nullable) = false];
}

message QueryAllNftTransferRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNftTransferResponse {
	repeated NftTransfer nftTransfer = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetReservedNftTransferRequest {
	  string reservedKey = 1;

}

message QueryGetReservedNftTransferResponse {
	ReservedNftTransfer reservedNftTransfer = 1 [(gogoproto.nullable) = false];
}

message QueryAllReservedNftTransferRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllReservedNftTransferResponse {
	repeated ReservedNftTransfer reservedNftTransfer = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetNftTransferStatusRequest {}

message QueryGetNftTransferStatusResponse {
	NftTransferStatus NftTransferStatus = 1 [(gogoproto.nullable) = false];
}
message QueryGetNftMintRequest {
	  string reservedKey = 1;

}

message QueryGetNftMintResponse {
	NftMint nftMint = 1 [(gogoproto.nullable) = false];
}

message QueryAllNftMintRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNftMintResponse {
	repeated NftMint nftMint = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryNftTransferStatusOfTokenRequest {
	int32 chain = 1;
	string contractAddr = 2;
	string tokenId = 3;
cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

message QueryNftTransferStatusOfTokenResponse {
	repeated NftTransferStatusDetail nftTransferStatusDetail = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryNftTransferStatusOfAddressRequest {
	int32 chain = 1;
	string walletAddr = 2;
cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryNftTransferStatusOfAddressResponse {
	repeated NftTransferStatusDetail nftTransferStatusDetail = 1 [(gogoproto.nullable) = false];
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryNftTransferHistoryRequest {
  int32 chain = 1;
  string contractAddr = 2;
  string tokenId = 3;
cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

message QueryNftTransferHistoryResponse {
  string nftTransferStatusDetail = 1;
cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
